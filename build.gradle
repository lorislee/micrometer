buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
    }
    dependencies {
        classpath 'org.ow2.asm:asm:5.0.3'
        classpath 'io.spring.gradle:spring-release-plugin:0.15.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.2.0'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.4'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath 'com.netflix.nebula:nebula-project-plugin:3.4.0'
    }
}

apply plugin: 'io.spring.release'

allprojects {
    apply plugin: 'io.spring.license'

    afterEvaluate { project ->
        println "I'm building $project.name with version $project.version"
    }
    group = 'io.micrometer'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    if(!project.name.contains('samples')) {
        apply plugin: 'io.spring.publishing'

        contacts {
            'jschneider@pivotal.io' {
                moniker 'Jon Schneider'
                github 'jkschneider'
            }
        }

        if (project.extensions.findByName('bintray')) {
            bintray.labels = ['micrometer', 'atlas', 'metrics', 'prometheus', 'spectator', 'influx', 'new-relic']
        }
    }

    description = 'Application monitoring instrumentation facade'

    repositories {
        mavenCentral()
    }

    checkstyle {
        toolVersion = '8.4'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    def check = tasks.findByName('check')
    if(check) project.rootProject.tasks.releaseCheck.dependsOn check

    //noinspection GroovyAssignabilityCheck
    test {
        // set heap size for the test JVM(s)
        maxHeapSize = "1500m"
    }

	tasks.withType(Checkstyle) {
        ignoreFailures true
        exclude '**/src/jvh/**'
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

defaultTasks 'build'
